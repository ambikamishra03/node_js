// srver provide data in form of json
// json(javascript object notation) - lightweight, structured and organized data.
//   const jsonString  = '{"name": "Ambika","age": 24,"city":"Deoria"}'
// const jsonObject = JSON.parse(jsonString)    // convert json string to object
// console.log(jsonObject);

// const str = JSON.stringify(jsonObject)    // convert object to json string
// console.log(str);

// console.log(typeof str);
// console.log(typeof jsonObject);



// imagine a menu card in restaurant
// customer - client, waiter - server(expressjs) of restaurant(NodeJS), kitchen room - db, chef - server of kitchen
// collection of all lists(menu card) - api
// option in that list - endpoint


// Nodejs server responsible for handling HTTP request from client and returning responses.
// it process these requests, communicate to db server and sends data to client 


// creating server in NodeJS using express package
// localhost - refers to own computer(house of waiter)
// port number - address of server(room of waiter in that house)

// body parser = middleware library for express.js
// client sends data to server in form of JSON, form data or url-encoded data.
// used to parse and extract the body of incoming http request 
// it gives us data in form which we needed.
// eg: bodyParser.json() automatically parses json data from request body and convert it 
// into javascript object, which is then stored in req.body 
// authentication - limited access,verify identity of user or system entity attempting to access resources or perform an action.
// this involves checking credential such as username and password or using other authentication methods like tokens api keys or certificates. 

// authorization - once identity verified through authentication, system moves on authorization.it determines what actions or resources the
// authenticated user or entity is allowed to access based on their permission, roles or other access control mechanism. 

// before u can determine what someone is allowed to do(authorization), u need to know who they are(authentication)
// authentication establishes identity,authorization associated with identity.
